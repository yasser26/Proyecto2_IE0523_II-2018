/* Generated by Yosys 0.7+574 (git sha1 0fad1570, gcc 6.3.0-18+deb9u1 -fPIC -Os) */

(* top =  1  *)
(* src = "arbitroEstructural.v:4" *)
module arbitroEstructural(clk, reset_L, VC0_p0, VC1_p0, VC0_p1, VC1_p1, validBits, emptyVC0_p0, emptyVC1_p0, emptyVC0_p1, emptyVC1_p1, popVC0_0, popVC1_0, popVC0_1, popVC1_1, dataOut_0, dataOut_1, validBitsOut);
  (* src = "arbitroEstructural.v:49" *)
  wire [4:0] _000_;
  (* src = "arbitroEstructural.v:49" *)
  wire [4:0] _001_;
  (* src = "arbitroEstructural.v:49" *)
  wire [5:0] _002_;
  (* src = "arbitroEstructural.v:49" *)
  wire [4:0] _003_;
  (* src = "arbitroEstructural.v:49" *)
  wire [4:0] _004_;
  (* src = "arbitroEstructural.v:49" *)
  wire [1:0] _005_;
  (* src = "arbitroEstructural.v:49" *)
  wire _006_;
  (* src = "arbitroEstructural.v:49" *)
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  (* src = "arbitroEstructural.v:6" *)
  input [4:0] VC0_p0;
  (* src = "arbitroEstructural.v:8" *)
  input [4:0] VC0_p1;
  (* src = "arbitroEstructural.v:7" *)
  input [4:0] VC1_p0;
  (* src = "arbitroEstructural.v:9" *)
  input [4:0] VC1_p1;
  (* src = "arbitroEstructural.v:4" *)
  input clk;
  (* src = "arbitroEstructural.v:19" *)
  output [4:0] dataOut_0;
  (* src = "arbitroEstructural.v:20" *)
  output [4:0] dataOut_1;
  (* src = "arbitroEstructural.v:11" *)
  input emptyVC0_p0;
  (* src = "arbitroEstructural.v:13" *)
  input emptyVC0_p1;
  (* src = "arbitroEstructural.v:12" *)
  input emptyVC1_p0;
  (* src = "arbitroEstructural.v:14" *)
  input emptyVC1_p1;
  (* src = "arbitroEstructural.v:28" *)
  wire [5:0] muxMultiOut;
  (* src = "arbitroEstructural.v:27" *)
  wire [4:0] muxVC0_muxMulti;
  (* src = "arbitroEstructural.v:27" *)
  wire [4:0] muxVC1_muxMulti;
  (* src = "arbitroEstructural.v:15" *)
  output popVC0_0;
  (* src = "arbitroEstructural.v:17" *)
  output popVC0_1;
  (* src = "arbitroEstructural.v:16" *)
  output popVC1_0;
  (* src = "arbitroEstructural.v:18" *)
  output popVC1_1;
  (* src = "arbitroEstructural.v:24" *)
  wire request0_VC0;
  (* src = "arbitroEstructural.v:24" *)
  wire request0_VC1;
  (* src = "arbitroEstructural.v:24" *)
  wire request1_VC0;
  (* src = "arbitroEstructural.v:24" *)
  wire request1_VC1;
  (* src = "arbitroEstructural.v:5" *)
  input reset_L;
  (* src = "arbitroEstructural.v:25" *)
  wire selectMUX_VC0;
  (* src = "arbitroEstructural.v:25" *)
  wire selectMUX_VC1;
  (* src = "arbitroEstructural.v:10" *)
  input [3:0] validBits;
  (* src = "arbitroEstructural.v:21" *)
  output [1:0] validBitsOut;
  (* src = "arbitroEstructural.v:29" *)
  wire validMuxVC0;
  (* src = "arbitroEstructural.v:29" *)
  wire validMuxVC1;
  (* src = "arbitroEstructural.v:36" *)
  wire validMux_VC0;
  (* src = "arbitroEstructural.v:26" *)
  (* unused_bits = "0" *)
  wire validMux_VC1;
  NOT _126_ (
    .A(VC0_p1[1]),
    .Y(_123_)
  );
  NOT _127_ (
    .A(VC0_p1[2]),
    .Y(_124_)
  );
  NOT _128_ (
    .A(VC0_p1[3]),
    .Y(_125_)
  );
  NOT _129_ (
    .A(VC0_p1[4]),
    .Y(_008_)
  );
  NOT _130_ (
    .A(validBits[1]),
    .Y(_009_)
  );
  NOT _131_ (
    .A(VC1_p1[0]),
    .Y(_010_)
  );
  NOT _132_ (
    .A(VC1_p1[1]),
    .Y(_011_)
  );
  NOT _133_ (
    .A(VC1_p1[2]),
    .Y(_012_)
  );
  NOT _134_ (
    .A(VC1_p1[3]),
    .Y(_013_)
  );
  NOT _135_ (
    .A(VC1_p1[4]),
    .Y(_014_)
  );
  NOT _136_ (
    .A(validBits[3]),
    .Y(_015_)
  );
  NOT _137_ (
    .A(muxVC1_muxMulti[0]),
    .Y(_016_)
  );
  NOT _138_ (
    .A(muxVC1_muxMulti[1]),
    .Y(_017_)
  );
  NOT _139_ (
    .A(muxVC1_muxMulti[2]),
    .Y(_018_)
  );
  NOT _140_ (
    .A(muxVC1_muxMulti[3]),
    .Y(_019_)
  );
  NOT _141_ (
    .A(muxVC1_muxMulti[4]),
    .Y(_020_)
  );
  NOT _142_ (
    .A(validMuxVC1),
    .Y(_021_)
  );
  NOT _143_ (
    .A(validBitsOut[0]),
    .Y(_022_)
  );
  NOT _144_ (
    .A(muxMultiOut[0]),
    .Y(_023_)
  );
  NOT _145_ (
    .A(muxMultiOut[1]),
    .Y(_024_)
  );
  NOT _146_ (
    .A(muxMultiOut[2]),
    .Y(_025_)
  );
  NOT _147_ (
    .A(muxMultiOut[3]),
    .Y(_026_)
  );
  NOT _148_ (
    .A(muxMultiOut[5]),
    .Y(_027_)
  );
  NOT _149_ (
    .A(dataOut_0[0]),
    .Y(_028_)
  );
  NOT _150_ (
    .A(dataOut_0[1]),
    .Y(_029_)
  );
  NOT _151_ (
    .A(dataOut_0[2]),
    .Y(_030_)
  );
  NOT _152_ (
    .A(dataOut_0[3]),
    .Y(_031_)
  );
  NOT _153_ (
    .A(dataOut_0[4]),
    .Y(_032_)
  );
  NOT _154_ (
    .A(emptyVC0_p0),
    .Y(request0_VC0)
  );
  NOT _155_ (
    .A(emptyVC0_p1),
    .Y(request1_VC0)
  );
  NOT _156_ (
    .A(VC0_p1[0]),
    .Y(_033_)
  );
  NOR _157_ (
    .A(validBitsOut[1]),
    .B(muxMultiOut[4]),
    .Y(_034_)
  );
  NAND _158_ (
    .A(_021_),
    .B(muxMultiOut[4]),
    .Y(_035_)
  );
  NAND _159_ (
    .A(reset_L),
    .B(_035_),
    .Y(_036_)
  );
  NOR _160_ (
    .A(_034_),
    .B(_036_),
    .Y(_005_[1])
  );
  NOR _161_ (
    .A(muxMultiOut[4]),
    .B(validMuxVC0),
    .Y(_037_)
  );
  NAND _162_ (
    .A(muxMultiOut[4]),
    .B(_022_),
    .Y(_038_)
  );
  NAND _163_ (
    .A(reset_L),
    .B(_038_),
    .Y(_039_)
  );
  NOR _164_ (
    .A(_037_),
    .B(_039_),
    .Y(_005_[0])
  );
  NOR _165_ (
    .A(selectMUX_VC1),
    .B(validBits[2]),
    .Y(_040_)
  );
  NAND _166_ (
    .A(selectMUX_VC1),
    .B(_015_),
    .Y(_041_)
  );
  NAND _167_ (
    .A(reset_L),
    .B(_041_),
    .Y(_042_)
  );
  NOR _168_ (
    .A(_040_),
    .B(_042_),
    .Y(_007_)
  );
  NOR _169_ (
    .A(selectMUX_VC0),
    .B(validBits[0]),
    .Y(_043_)
  );
  NAND _170_ (
    .A(selectMUX_VC0),
    .B(_009_),
    .Y(_044_)
  );
  NAND _171_ (
    .A(reset_L),
    .B(_044_),
    .Y(_045_)
  );
  NOR _172_ (
    .A(_043_),
    .B(_045_),
    .Y(_006_)
  );
  NAND _173_ (
    .A(_016_),
    .B(validMux_VC0),
    .Y(_046_)
  );
  NAND _174_ (
    .A(reset_L),
    .B(_046_),
    .Y(_047_)
  );
  NOR _175_ (
    .A(muxVC0_muxMulti[0]),
    .B(validMux_VC0),
    .Y(_048_)
  );
  NOR _176_ (
    .A(_047_),
    .B(_048_),
    .Y(_002_[0])
  );
  NAND _177_ (
    .A(validMux_VC0),
    .B(_017_),
    .Y(_049_)
  );
  NAND _178_ (
    .A(reset_L),
    .B(_049_),
    .Y(_050_)
  );
  NOR _179_ (
    .A(validMux_VC0),
    .B(muxVC0_muxMulti[1]),
    .Y(_051_)
  );
  NOR _180_ (
    .A(_050_),
    .B(_051_),
    .Y(_002_[1])
  );
  NAND _181_ (
    .A(validMux_VC0),
    .B(_018_),
    .Y(_052_)
  );
  NAND _182_ (
    .A(reset_L),
    .B(_052_),
    .Y(_053_)
  );
  NOR _183_ (
    .A(validMux_VC0),
    .B(muxVC0_muxMulti[2]),
    .Y(_054_)
  );
  NOR _184_ (
    .A(_053_),
    .B(_054_),
    .Y(_002_[2])
  );
  NAND _185_ (
    .A(validMux_VC0),
    .B(_019_),
    .Y(_055_)
  );
  NAND _186_ (
    .A(reset_L),
    .B(_055_),
    .Y(_056_)
  );
  NOR _187_ (
    .A(validMux_VC0),
    .B(muxVC0_muxMulti[3]),
    .Y(_057_)
  );
  NOR _188_ (
    .A(_056_),
    .B(_057_),
    .Y(_002_[3])
  );
  NAND _189_ (
    .A(validMux_VC0),
    .B(_020_),
    .Y(_058_)
  );
  NAND _190_ (
    .A(reset_L),
    .B(_058_),
    .Y(_059_)
  );
  NOR _191_ (
    .A(validMux_VC0),
    .B(muxVC0_muxMulti[4]),
    .Y(_060_)
  );
  NOR _192_ (
    .A(_059_),
    .B(_060_),
    .Y(_002_[4])
  );
  NAND _193_ (
    .A(validMux_VC0),
    .B(reset_L),
    .Y(_061_)
  );
  NOT _194_ (
    .A(_061_),
    .Y(_002_[5])
  );
  NOR _195_ (
    .A(VC1_p0[0]),
    .B(selectMUX_VC1),
    .Y(_062_)
  );
  NAND _196_ (
    .A(_010_),
    .B(selectMUX_VC1),
    .Y(_063_)
  );
  NAND _197_ (
    .A(reset_L),
    .B(_063_),
    .Y(_064_)
  );
  NOR _198_ (
    .A(_062_),
    .B(_064_),
    .Y(_004_[0])
  );
  NOR _199_ (
    .A(selectMUX_VC1),
    .B(VC1_p0[1]),
    .Y(_065_)
  );
  NAND _200_ (
    .A(selectMUX_VC1),
    .B(_011_),
    .Y(_066_)
  );
  NAND _201_ (
    .A(reset_L),
    .B(_066_),
    .Y(_067_)
  );
  NOR _202_ (
    .A(_065_),
    .B(_067_),
    .Y(_004_[1])
  );
  NOR _203_ (
    .A(selectMUX_VC1),
    .B(VC1_p0[2]),
    .Y(_068_)
  );
  NAND _204_ (
    .A(selectMUX_VC1),
    .B(_012_),
    .Y(_069_)
  );
  NAND _205_ (
    .A(reset_L),
    .B(_069_),
    .Y(_070_)
  );
  NOR _206_ (
    .A(_068_),
    .B(_070_),
    .Y(_004_[2])
  );
  NOR _207_ (
    .A(selectMUX_VC1),
    .B(VC1_p0[3]),
    .Y(_071_)
  );
  NAND _208_ (
    .A(selectMUX_VC1),
    .B(_013_),
    .Y(_072_)
  );
  NAND _209_ (
    .A(reset_L),
    .B(_072_),
    .Y(_073_)
  );
  NOR _210_ (
    .A(_071_),
    .B(_073_),
    .Y(_004_[3])
  );
  NOR _211_ (
    .A(selectMUX_VC1),
    .B(VC1_p0[4]),
    .Y(_074_)
  );
  NAND _212_ (
    .A(selectMUX_VC1),
    .B(_014_),
    .Y(_075_)
  );
  NAND _213_ (
    .A(reset_L),
    .B(_075_),
    .Y(_076_)
  );
  NOR _214_ (
    .A(_074_),
    .B(_076_),
    .Y(_004_[4])
  );
  NOR _215_ (
    .A(selectMUX_VC0),
    .B(VC0_p0[0]),
    .Y(_077_)
  );
  NAND _216_ (
    .A(selectMUX_VC0),
    .B(_033_),
    .Y(_078_)
  );
  NAND _217_ (
    .A(reset_L),
    .B(_078_),
    .Y(_079_)
  );
  NOR _218_ (
    .A(_077_),
    .B(_079_),
    .Y(_003_[0])
  );
  NOR _219_ (
    .A(VC0_p0[1]),
    .B(selectMUX_VC0),
    .Y(_080_)
  );
  NAND _220_ (
    .A(_123_),
    .B(selectMUX_VC0),
    .Y(_081_)
  );
  NAND _221_ (
    .A(reset_L),
    .B(_081_),
    .Y(_082_)
  );
  NOR _222_ (
    .A(_080_),
    .B(_082_),
    .Y(_003_[1])
  );
  NOR _223_ (
    .A(selectMUX_VC0),
    .B(VC0_p0[2]),
    .Y(_083_)
  );
  NAND _224_ (
    .A(selectMUX_VC0),
    .B(_124_),
    .Y(_084_)
  );
  NAND _225_ (
    .A(reset_L),
    .B(_084_),
    .Y(_085_)
  );
  NOR _226_ (
    .A(_083_),
    .B(_085_),
    .Y(_003_[2])
  );
  NOR _227_ (
    .A(selectMUX_VC0),
    .B(VC0_p0[3]),
    .Y(_086_)
  );
  NAND _228_ (
    .A(selectMUX_VC0),
    .B(_125_),
    .Y(_087_)
  );
  NAND _229_ (
    .A(reset_L),
    .B(_087_),
    .Y(_088_)
  );
  NOR _230_ (
    .A(_086_),
    .B(_088_),
    .Y(_003_[3])
  );
  NOR _231_ (
    .A(selectMUX_VC0),
    .B(VC0_p0[4]),
    .Y(_089_)
  );
  NAND _232_ (
    .A(selectMUX_VC0),
    .B(_008_),
    .Y(_090_)
  );
  NAND _233_ (
    .A(reset_L),
    .B(_090_),
    .Y(_091_)
  );
  NOR _234_ (
    .A(_089_),
    .B(_091_),
    .Y(_003_[4])
  );
  NOR _235_ (
    .A(muxMultiOut[4]),
    .B(dataOut_1[0]),
    .Y(_092_)
  );
  NAND _236_ (
    .A(muxMultiOut[4]),
    .B(_023_),
    .Y(_093_)
  );
  NAND _237_ (
    .A(reset_L),
    .B(_093_),
    .Y(_094_)
  );
  NOR _238_ (
    .A(_092_),
    .B(_094_),
    .Y(_001_[0])
  );
  NOR _239_ (
    .A(muxMultiOut[4]),
    .B(dataOut_1[1]),
    .Y(_095_)
  );
  NAND _240_ (
    .A(muxMultiOut[4]),
    .B(_024_),
    .Y(_096_)
  );
  NAND _241_ (
    .A(reset_L),
    .B(_096_),
    .Y(_097_)
  );
  NOR _242_ (
    .A(_095_),
    .B(_097_),
    .Y(_001_[1])
  );
  NOR _243_ (
    .A(muxMultiOut[4]),
    .B(dataOut_1[2]),
    .Y(_098_)
  );
  NAND _244_ (
    .A(muxMultiOut[4]),
    .B(_025_),
    .Y(_099_)
  );
  NAND _245_ (
    .A(reset_L),
    .B(_099_),
    .Y(_100_)
  );
  NOR _246_ (
    .A(_098_),
    .B(_100_),
    .Y(_001_[2])
  );
  NOR _247_ (
    .A(muxMultiOut[4]),
    .B(dataOut_1[3]),
    .Y(_101_)
  );
  NAND _248_ (
    .A(muxMultiOut[4]),
    .B(_026_),
    .Y(_102_)
  );
  NAND _249_ (
    .A(reset_L),
    .B(_102_),
    .Y(_103_)
  );
  NOR _250_ (
    .A(_101_),
    .B(_103_),
    .Y(_001_[3])
  );
  NOR _251_ (
    .A(muxMultiOut[4]),
    .B(dataOut_1[4]),
    .Y(_104_)
  );
  NAND _252_ (
    .A(muxMultiOut[4]),
    .B(_027_),
    .Y(_105_)
  );
  NAND _253_ (
    .A(reset_L),
    .B(_105_),
    .Y(_106_)
  );
  NOR _254_ (
    .A(_104_),
    .B(_106_),
    .Y(_001_[4])
  );
  NOR _255_ (
    .A(muxMultiOut[4]),
    .B(muxMultiOut[0]),
    .Y(_107_)
  );
  NAND _256_ (
    .A(muxMultiOut[4]),
    .B(_028_),
    .Y(_108_)
  );
  NAND _257_ (
    .A(reset_L),
    .B(_108_),
    .Y(_109_)
  );
  NOR _258_ (
    .A(_107_),
    .B(_109_),
    .Y(_000_[0])
  );
  NOR _259_ (
    .A(muxMultiOut[4]),
    .B(muxMultiOut[1]),
    .Y(_110_)
  );
  NAND _260_ (
    .A(muxMultiOut[4]),
    .B(_029_),
    .Y(_111_)
  );
  NAND _261_ (
    .A(reset_L),
    .B(_111_),
    .Y(_112_)
  );
  NOR _262_ (
    .A(_110_),
    .B(_112_),
    .Y(_000_[1])
  );
  NOR _263_ (
    .A(muxMultiOut[4]),
    .B(muxMultiOut[2]),
    .Y(_113_)
  );
  NAND _264_ (
    .A(muxMultiOut[4]),
    .B(_030_),
    .Y(_114_)
  );
  NAND _265_ (
    .A(reset_L),
    .B(_114_),
    .Y(_115_)
  );
  NOR _266_ (
    .A(_113_),
    .B(_115_),
    .Y(_000_[2])
  );
  NOR _267_ (
    .A(muxMultiOut[4]),
    .B(muxMultiOut[3]),
    .Y(_116_)
  );
  NAND _268_ (
    .A(muxMultiOut[4]),
    .B(_031_),
    .Y(_117_)
  );
  NAND _269_ (
    .A(reset_L),
    .B(_117_),
    .Y(_118_)
  );
  NOR _270_ (
    .A(_116_),
    .B(_118_),
    .Y(_000_[3])
  );
  NOR _271_ (
    .A(muxMultiOut[4]),
    .B(muxMultiOut[5]),
    .Y(_119_)
  );
  NAND _272_ (
    .A(muxMultiOut[4]),
    .B(_032_),
    .Y(_120_)
  );
  NAND _273_ (
    .A(reset_L),
    .B(_120_),
    .Y(_121_)
  );
  NOR _274_ (
    .A(_119_),
    .B(_121_),
    .Y(_000_[4])
  );
  NAND _275_ (
    .A(emptyVC0_p0),
    .B(emptyVC0_p1),
    .Y(_122_)
  );
  NOR _276_ (
    .A(emptyVC1_p0),
    .B(_122_),
    .Y(request0_VC1)
  );
  NOR _277_ (
    .A(emptyVC1_p1),
    .B(_122_),
    .Y(request1_VC1)
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _278_ (
    .C(clk),
    .D(_000_[0]),
    .Q(dataOut_0[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _279_ (
    .C(clk),
    .D(_000_[1]),
    .Q(dataOut_0[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _280_ (
    .C(clk),
    .D(_000_[2]),
    .Q(dataOut_0[2])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _281_ (
    .C(clk),
    .D(_000_[3]),
    .Q(dataOut_0[3])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _282_ (
    .C(clk),
    .D(_000_[4]),
    .Q(dataOut_0[4])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _283_ (
    .C(clk),
    .D(_001_[0]),
    .Q(dataOut_1[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _284_ (
    .C(clk),
    .D(_001_[1]),
    .Q(dataOut_1[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _285_ (
    .C(clk),
    .D(_001_[2]),
    .Q(dataOut_1[2])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _286_ (
    .C(clk),
    .D(_001_[3]),
    .Q(dataOut_1[3])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _287_ (
    .C(clk),
    .D(_001_[4]),
    .Q(dataOut_1[4])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _288_ (
    .C(clk),
    .D(_005_[0]),
    .Q(validBitsOut[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _289_ (
    .C(clk),
    .D(_005_[1]),
    .Q(validBitsOut[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _290_ (
    .C(clk),
    .D(_003_[0]),
    .Q(muxVC0_muxMulti[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _291_ (
    .C(clk),
    .D(_003_[1]),
    .Q(muxVC0_muxMulti[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _292_ (
    .C(clk),
    .D(_003_[2]),
    .Q(muxVC0_muxMulti[2])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _293_ (
    .C(clk),
    .D(_003_[3]),
    .Q(muxVC0_muxMulti[3])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _294_ (
    .C(clk),
    .D(_003_[4]),
    .Q(muxVC0_muxMulti[4])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _295_ (
    .C(clk),
    .D(_004_[0]),
    .Q(muxVC1_muxMulti[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _296_ (
    .C(clk),
    .D(_004_[1]),
    .Q(muxVC1_muxMulti[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _297_ (
    .C(clk),
    .D(_004_[2]),
    .Q(muxVC1_muxMulti[2])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _298_ (
    .C(clk),
    .D(_004_[3]),
    .Q(muxVC1_muxMulti[3])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _299_ (
    .C(clk),
    .D(_004_[4]),
    .Q(muxVC1_muxMulti[4])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _300_ (
    .C(clk),
    .D(_002_[0]),
    .Q(muxMultiOut[0])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _301_ (
    .C(clk),
    .D(_002_[1]),
    .Q(muxMultiOut[1])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _302_ (
    .C(clk),
    .D(_002_[2]),
    .Q(muxMultiOut[2])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _303_ (
    .C(clk),
    .D(_002_[3]),
    .Q(muxMultiOut[3])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _304_ (
    .C(clk),
    .D(_002_[4]),
    .Q(muxMultiOut[4])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _305_ (
    .C(clk),
    .D(_002_[5]),
    .Q(muxMultiOut[5])
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _306_ (
    .C(clk),
    .D(_006_),
    .Q(validMuxVC0)
  );
  (* src = "arbitroEstructural.v:49" *)
  DFF _307_ (
    .C(clk),
    .D(_007_),
    .Q(validMuxVC1)
  );
  (* src = "arbitroEstructural.v:31" *)
  roundRobinEstructural roundRobinEstructuralVC0 (
    .clk(clk),
    .pop_0(popVC0_0),
    .pop_1(popVC0_1),
    .portMux(selectMUX_VC0),
    .request0(request0_VC0),
    .request1(request1_VC0),
    .reset_L(reset_L),
    .validMux(validMux_VC0)
  );
  (* src = "arbitroEstructural.v:40" *)
  roundRobinEstructural roundRobinEstructuralVC1 (
    .clk(clk),
    .pop_0(popVC1_0),
    .pop_1(popVC1_1),
    .portMux(selectMUX_VC1),
    .request0(request0_VC1),
    .request1(request1_VC1),
    .reset_L(reset_L),
    .validMux(validMux_VC1)
  );
endmodule

(* src = "roundRobinEstructural.v:1" *)
module roundRobinEstructural(clk, reset_L, request0, request1, portMux, validMux, pop_0, pop_1);
  (* src = "roundRobinEstructural.v:12" *)
  wire _00_;
  (* src = "roundRobinEstructural.v:12" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "roundRobinEstructural.v:1" *)
  input clk;
  (* src = "roundRobinEstructural.v:7" *)
  output pop_0;
  (* src = "roundRobinEstructural.v:8" *)
  output pop_1;
  (* src = "roundRobinEstructural.v:5" *)
  output portMux;
  (* src = "roundRobinEstructural.v:3" *)
  input request0;
  (* src = "roundRobinEstructural.v:4" *)
  input request1;
  (* src = "roundRobinEstructural.v:2" *)
  input reset_L;
  (* src = "roundRobinEstructural.v:6" *)
  output validMux;
  NOT _12_ (
    .A(request0),
    .Y(_11_)
  );
  NOR _13_ (
    .A(_11_),
    .B(portMux),
    .Y(_02_)
  );
  NAND _14_ (
    .A(request1),
    .B(reset_L),
    .Y(_03_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_03_),
    .Y(pop_1)
  );
  NAND _16_ (
    .A(request1),
    .B(portMux),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(request0),
    .B(reset_L),
    .Y(_06_)
  );
  NOR _19_ (
    .A(request0),
    .B(request1),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_06_),
    .Y(pop_0)
  );
  NAND _21_ (
    .A(reset_L),
    .B(_07_),
    .Y(_08_)
  );
  NOT _22_ (
    .A(_08_),
    .Y(_01_)
  );
  NAND _23_ (
    .A(request0),
    .B(portMux),
    .Y(_09_)
  );
  NOT _24_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _25_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "roundRobinEstructural.v:12" *)
  DFF _26_ (
    .C(clk),
    .D(_00_),
    .Q(portMux)
  );
  (* src = "roundRobinEstructural.v:12" *)
  DFF _27_ (
    .C(clk),
    .D(_01_),
    .Q(validMux)
  );
endmodule
